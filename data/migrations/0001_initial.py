# Generated by Django 4.2.4 on 2025-04-09 16:30

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FoodItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('barcode', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('brand', models.CharField(blank=True, max_length=255, null=True)),
                ('kcal_per_100g', models.FloatField()),
                ('protein_per_100g', models.FloatField()),
                ('carbs_per_100g', models.FloatField()),
                ('sugars_per_100g', models.FloatField(blank=True, null=True)),
                ('fats_per_100g', models.FloatField()),
                ('saturated_fats_per_100g', models.FloatField(blank=True, null=True)),
                ('fiber_per_100g', models.FloatField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FoodPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('max_kcal', models.FloatField()),
                ('max_protein', models.FloatField()),
                ('max_carbs', models.FloatField()),
                ('max_fats', models.FloatField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Weight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_recorded', models.DateField()),
                ('weight_value', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('id_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FoodPlanSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('start_time', models.IntegerField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FoodPlanItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eaten', models.BooleanField(default=False)),
                ('quantity_in_grams', models.FloatField()),
                ('food_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.fooditem')),
                ('food_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.foodplan')),
                ('food_section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.foodplansection')),
            ],
        ),
        migrations.AddField(
            model_name='foodplan',
            name='food_items',
            field=models.ManyToManyField(through='data.FoodPlanItem', to='data.fooditem'),
        ),
        migrations.CreateModel(
            name='DetailsAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_birth', models.DateField()),
                ('biological_gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=10)),
                ('height_cm', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(300)])),
                ('profile_picture', models.ImageField(blank=True, default='profile_pics/default.jpg', null=True, upload_to='profile_pics/')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BodyMeasurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chest', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('bicep', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('thigh', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('waist', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('hips', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('abdomen', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('calf', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('neck', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('shoulders', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('date_recorded', models.DateField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
