# Generated by Django 4.2.4 on 2025-04-14 14:19

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FoodItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('barcode', models.CharField(blank=True, max_length=50, null=True)),
                ('brand', models.CharField(blank=True, max_length=255, null=True)),
                ('kcal_per_100g', models.FloatField()),
                ('protein_per_100g', models.FloatField()),
                ('carbs_per_100g', models.FloatField()),
                ('sugars_per_100g', models.FloatField(blank=True, null=True)),
                ('fats_per_100g', models.FloatField()),
                ('saturated_fats_per_100g', models.FloatField(blank=True, null=True)),
                ('fiber_per_100g', models.FloatField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FoodPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('max_kcal', models.FloatField()),
                ('max_protein', models.FloatField()),
                ('max_carbs', models.FloatField()),
                ('max_fats', models.FloatField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GymItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('force', models.CharField(blank=True, choices=[('pull', 'Pull'), ('push', 'Push'), ('static', 'Statico')], max_length=50, null=True)),
                ('level', models.CharField(blank=True, choices=[('beginner', 'Principiante'), ('intermediate', 'Intermedio'), ('expert', 'Esperto')], max_length=50)),
                ('mechanic', models.CharField(blank=True, choices=[('compound', 'Multiarticolare'), ('isolation', 'Isolamento')], max_length=50, null=True)),
                ('category', models.CharField(blank=True, choices=[('cardio', 'Cardio'), ('olympic weightlifting', 'Olympic Weightlifting'), ('plyometrics', 'Plyometrics'), ('powerlifting', 'Powerlifting'), ('strength', 'Strength'), ('stretching', 'Stretching'), ('strongman', 'Strongman')], max_length=50)),
                ('equipment', models.CharField(blank=True, choices=[('bands', 'Elastici'), ('barbell', 'Bilanciere'), ('body only', 'Corpo Libero'), ('cable', 'Cavi'), ('dumbbell', 'Manubri'), ('e-z curl bar', 'Bilanciere E-Z'), ('exercise ball', 'Palla Fitness'), ('foam roll', 'Rullo di Schiuma'), ('kettlebells', 'Kettlebell'), ('machine', 'Macchinario'), ('medicine ball', 'Palla Medica'), ('other', 'Altro')], max_length=50, null=True)),
                ('primary_muscle', models.CharField(blank=True, choices=[('abdominals', 'Addominali'), ('abductors', 'Abduttori'), ('adductors', 'Adduttori'), ('biceps', 'Bicipiti'), ('calves', 'Polpacci'), ('chest', 'Petto'), ('forearms', 'Avambracci'), ('glutes', 'Glutei'), ('hamstrings', 'Femorali'), ('lats', 'Dorsali'), ('lower back', 'Zona Lombare'), ('middle back', 'Schiena Media'), ('neck', 'Collo'), ('quadriceps', 'Quadricipiti'), ('shoulders', 'Spalle'), ('traps', 'Trapezi'), ('triceps', 'Tricipiti')], max_length=50, null=True)),
                ('secondary_muscles', models.JSONField(blank=True, default=list)),
                ('instructions', models.JSONField(blank=True, default=list)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GymMediaUpload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='gym_media/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='GymPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('note', models.TextField(blank=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GymPlanItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0)),
                ('notes', models.TextField(blank=True, null=True)),
                ('intensity_techniques', models.JSONField(blank=True, default=list, help_text="Lista di tecniche d’intensità (es: ['drop_set', 'tempo'])")),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.gymitem')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Weight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_recorded', models.DateField()),
                ('weight_value', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GymPlanSetDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0, help_text='Ordine del set nella lista')),
                ('set_number', models.PositiveIntegerField()),
                ('prescribed_reps', models.PositiveIntegerField()),
                ('actual_reps', models.PositiveIntegerField(blank=True, null=True)),
                ('rir', models.PositiveIntegerField(blank=True, help_text='Reps in reserve', null=True)),
                ('rest_seconds', models.PositiveIntegerField(blank=True, null=True)),
                ('weight', models.FloatField(blank=True, help_text='Peso in kg', null=True)),
                ('tempo', models.CharField(blank=True, help_text="Formato: 'eccentrica-pausa-concentrica', es. '3-1-2'", max_length=10, null=True)),
                ('plan_item', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='sets', to='data.gymplanitem')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='GymPlanSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(choices=[('lun', 'Lunedì'), ('mar', 'Martedì'), ('mer', 'Mercoledì'), ('gio', 'Giovedì'), ('ven', 'Venerdì'), ('sab', 'Sabato'), ('dom', 'Domenica')], max_length=3)),
                ('type', models.CharField(help_text='Es. Push, Gambe, Full Body', max_length=100)),
                ('note', models.TextField(blank=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('gym_plan', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='data.gymplan')),
            ],
        ),
        migrations.AddField(
            model_name='gymplanitem',
            name='section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.gymplansection'),
        ),
        migrations.AddField(
            model_name='gymitem',
            name='image_urls',
            field=models.ManyToManyField(to='data.gymmediaupload'),
        ),
        migrations.CreateModel(
            name='FoodPlanSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('start_time', models.IntegerField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FoodPlanItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eaten', models.BooleanField(default=False)),
                ('quantity_in_grams', models.FloatField()),
                ('food_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.fooditem')),
                ('food_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.foodplan')),
                ('food_section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.foodplansection')),
            ],
        ),
        migrations.AddField(
            model_name='foodplan',
            name='food_items',
            field=models.ManyToManyField(through='data.FoodPlanItem', to='data.fooditem'),
        ),
        migrations.CreateModel(
            name='DetailsAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_birth', models.DateField()),
                ('biological_gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=10)),
                ('height_cm', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(300)])),
                ('profile_picture', models.ImageField(blank=True, default='profile_pics/default.jpg', null=True, upload_to='profile_pics/')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BodyMeasurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chest', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('bicep', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('thigh', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('waist', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('hips', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('abdomen', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('calf', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('neck', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('shoulders', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('date_recorded', models.DateField(default=django.utils.timezone.now)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
