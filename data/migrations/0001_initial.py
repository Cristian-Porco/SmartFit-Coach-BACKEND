# Generated by Django 4.2.4 on 2025-04-09 18:58

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FoodItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('barcode', models.CharField(blank=True, max_length=50, null=True)),
                ('brand', models.CharField(blank=True, max_length=255, null=True)),
                ('kcal_per_100g', models.FloatField()),
                ('protein_per_100g', models.FloatField()),
                ('carbs_per_100g', models.FloatField()),
                ('sugars_per_100g', models.FloatField(blank=True, null=True)),
                ('fats_per_100g', models.FloatField()),
                ('saturated_fats_per_100g', models.FloatField(blank=True, null=True)),
                ('fiber_per_100g', models.FloatField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FoodPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('max_kcal', models.FloatField()),
                ('max_protein', models.FloatField()),
                ('max_carbs', models.FloatField()),
                ('max_fats', models.FloatField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GymItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('force', models.CharField(blank=True, choices=[('pull', 'Pull'), ('push', 'Push'), ('static', 'Static')], max_length=50, null=True)),
                ('level', models.CharField(blank=True, choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('expert', 'Expert')], max_length=50)),
                ('mechanic', models.CharField(blank=True, choices=[('compound', 'Compound'), ('isolation', 'Isolation')], max_length=50, null=True)),
                ('category', models.CharField(blank=True, choices=[('cardio', 'Cardio'), ('olympic weightlifting', 'Olympic Weightlifting'), ('plyometrics', 'Plyometrics'), ('powerlifting', 'Powerlifting'), ('strength', 'Strength'), ('stretching', 'Stretching'), ('strongman', 'Strongman')], max_length=50)),
                ('equipment', models.CharField(blank=True, choices=[('bands', 'Bands'), ('barbell', 'Barbell'), ('body only', 'Body Only'), ('cable', 'Cable'), ('dumbbell', 'Dumbbell'), ('e-z curl bar', 'E-Z Curl Bar'), ('exercise ball', 'Exercise Ball'), ('foam roll', 'Foam Roll'), ('kettlebells', 'Kettlebells'), ('machine', 'Machine'), ('medicine ball', 'Medicine Ball'), ('other', 'Other')], max_length=50, null=True)),
                ('primary_muscle', models.CharField(blank=True, choices=[('abdominals', 'Abdominals'), ('abductors', 'Abductors'), ('adductors', 'Adductors'), ('biceps', 'Biceps'), ('calves', 'Calves'), ('chest', 'Chest'), ('forearms', 'Forearms'), ('glutes', 'Glutes'), ('hamstrings', 'Hamstrings'), ('lats', 'Lats'), ('lower back', 'Lower Back'), ('middle back', 'Middle Back'), ('neck', 'Neck'), ('quadriceps', 'Quadriceps'), ('shoulders', 'Shoulders'), ('traps', 'Traps'), ('triceps', 'Triceps')], max_length=50, null=True)),
                ('secondary_muscles', models.JSONField(blank=True, default=list)),
                ('instructions', models.JSONField(blank=True, default=list)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GymPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('note', models.TextField(blank=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GymPlanSetDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('set_number', models.PositiveIntegerField()),
                ('reps', models.PositiveIntegerField()),
                ('weight', models.FloatField()),
                ('rir', models.PositiveIntegerField(blank=True, null=True)),
                ('tempo_code', models.CharField(blank=True, max_length=10)),
                ('set_type', models.CharField(choices=[('standard', 'Standard'), ('activation', 'Activation (Myo-Reps)'), ('mini', 'Mini-set (Myo-Reps)'), ('cluster', 'Cluster Subset')], default='standard', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Weight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_recorded', models.DateField()),
                ('weight_value', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GymPlanSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(choices=[('lun', 'Lunedì'), ('mar', 'Martedì'), ('mer', 'Mercoledì'), ('gio', 'Giovedì'), ('ven', 'Venerdì'), ('sab', 'Sabato'), ('dom', 'Domenica')], max_length=3)),
                ('type', models.CharField(help_text='Es. Push, Gambe, Full Body', max_length=100)),
                ('note', models.TextField(blank=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GymPlanItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('series_type', models.CharField(choices=[('linear', 'Linear'), ('pyramidal', 'Pyramidal'), ('reverse_pyramidal', 'Reverse Pyramidal'), ('ramping', 'Ramping'), ('top_set', 'Top Set'), ('back_off', 'Back-off'), ('wave', 'Wave'), ('cluster', 'Cluster'), ('dropset', 'Dropset'), ('superset', 'Superset'), ('giant_set', 'Giant Set'), ('rest_pause', 'Rest-Pause'), ('myo_reps', 'Myo-Reps'), ('tempo', 'Tempo'), ('forced_reps', 'Forced Reps'), ('negatives', 'Negatives'), ('pre_exhaust', 'Pre-Exhaust'), ('post_exhaust', 'Post-Exhaust'), ('circuit', 'Circuit'), ('amrap', 'AMRAP'), ('emom', 'EMOM'), ('tabata', 'Tabata'), ('autoregulated', 'Autoregulated'), ('free', 'Free')], max_length=30)),
                ('intensity_techniques', models.JSONField(blank=True, default=list)),
                ('order', models.PositiveIntegerField()),
                ('rest_seconds', models.PositiveIntegerField()),
                ('notes', models.TextField(blank=True)),
                ('rir', models.PositiveIntegerField(blank=True, help_text='Reps in reserve', null=True)),
                ('tempo_code', models.CharField(blank=True, help_text="e.g., '3-1-2'", max_length=10)),
                ('target_range', models.CharField(blank=True, help_text="e.g., '8-10 reps'", max_length=20)),
                ('weekly_progression', models.CharField(blank=True, help_text="e.g., '+2.5% per week'", max_length=100)),
                ('is_top_set', models.BooleanField(default=False)),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.gymitem')),
                ('gym_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.gymplan')),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.gymplansection')),
                ('set_details', models.ManyToManyField(related_name='set_details', to='data.gymplansetdetail')),
            ],
        ),
        migrations.AddField(
            model_name='gymplan',
            name='gym_items',
            field=models.ManyToManyField(through='data.GymPlanItem', to='data.gymitem'),
        ),
        migrations.CreateModel(
            name='GymMediaUpload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='gym_media/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='gymitem',
            name='image_urls',
            field=models.ManyToManyField(to='data.gymmediaupload'),
        ),
        migrations.CreateModel(
            name='FoodPlanSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('start_time', models.IntegerField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FoodPlanItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eaten', models.BooleanField(default=False)),
                ('quantity_in_grams', models.FloatField()),
                ('food_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.fooditem')),
                ('food_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.foodplan')),
                ('food_section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.foodplansection')),
            ],
        ),
        migrations.AddField(
            model_name='foodplan',
            name='food_items',
            field=models.ManyToManyField(through='data.FoodPlanItem', to='data.fooditem'),
        ),
        migrations.CreateModel(
            name='DetailsAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_birth', models.DateField()),
                ('biological_gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=10)),
                ('height_cm', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(300)])),
                ('profile_picture', models.ImageField(blank=True, default='profile_pics/default.jpg', null=True, upload_to='profile_pics/')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BodyMeasurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chest', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('bicep', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('thigh', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('waist', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('hips', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('abdomen', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('calf', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('neck', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('shoulders', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('date_recorded', models.DateField(default=django.utils.timezone.now)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
